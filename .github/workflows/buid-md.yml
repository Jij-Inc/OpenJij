name: Build MarkDown

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  Python_Version: '3.10'

jobs:
  build_md:
    name: Build Documentation 
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: build-md-${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: ${{env.Python_Version}}
      - name: Python Cache Key
        shell: bash
        run: |
          echo $(which python) > /tmp/python_version.txt
      - name: Get pip cache dir
        shell: bash
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Pip-Tools 
        shell: bash
        run: |
          python -m pip install pip-tools 
          pip-compile
          pip-compile dev-requirements.in
      - uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-md-${{ hashFiles('python_version.txt') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-md-${{ hashFiles('python_version.txt') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}
            ${{ runner.os }}-md-${{ hashFiles('python_version.txt') }}-${{ hashFiles('requirements.txt') }}
            ${{ runner.os }}-md-${{ hashFiles('python_version.txt') }}
      - name: Update
        run: | 
         pip install --upgrade pip wheel setuptools build cmake ninja 
      - name: Install Dependencies
        shell: bash
        run: |
          set -eux
          pip-sync requirements.txt dev-requirements.txt
      - name: Install Dep
        run: | 
         pip install pydoc-markdown
         sudo apt-get install -y libeigen3-dev
         sudo apt-get install -y libopenblas-dev 
      - name: Build & Install    
        run: |
          set -eux
          pip install -vvv . 
      - name: Pydoc-Markdown
        run: |
          mkdir markdown
          cd markdown
          pydoc-markdown --help 
          pydoc-markdown --verbose --package openjij --py3 
      - name: du -a 
        shell: bash
        if: always()
        run: |
          du -a
      - name: Prepare tag
        id: prepare_tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME="${GITHUB_REF##refs/tags/}"
          echo "::set-output name=tag_name::${TAG_NAME}"
          echo "::set-output name=deploy_tag_name::deploy-${TAG_NAME}"
      - name: Deploy
        #if: ${{github.event_name == 'release'}}
        uses: peaceiris/actions-gh-pages@v3
        with:
         personal_token: ${{ secrets.OPENJIJ_WEB }}
         keep_files: true
         allow_empty_commit: true
         publish_dir: ./markdown
         publish_branch: main
         external_repository: OpenJij/OpenJij-Documentation
         destination_dir: www
         user_name: 'github-actions[bot]'
         user_email: 'github-actions[bot]@users.noreply.github.com'
         commit_message: ${{ github.event.head_commit.message }}
         full_commit_message: ${{ github.event.head_commit.message }}
         tag_name: ${{ steps.prepare_tag.outputs.deploy_tag_name }}
         tag_message: 'Deployment ${{ steps.prepare_tag.outputs.tag_name }}'
         
